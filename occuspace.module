<?php

/**
 * Implementation of hook_views_api().
 */
function occuspace_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'occuspace') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function occuspace_menu() {
  /* proxy settings */
  $items['admin/config/system/occuspace']
    = array(
    'title' => 'Occuspace report settings',
    'description' => 'Configure settings for Occuspace reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('occuspace_settings'),
    'access arguments' => array('administer occuspace settings'),
    'weight' => -10,
  );

  return $items;
}

function occuspace_permission() {
  $modperms = array(
    'administer occuspace settings' => array(
      'title' => t('Administer Occuspace reports'),
    ),
  );
  return $modperms;
}

/**
 * @return mixed
 */
function occuspace_settings() {
  $form = array();
  $form['occuspace_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Server'),
    '#default_value' => variable_get('occuspace_server', ""),
    '#description' => t("Server used for the Occuspace api"),
    '#required' => TRUE,
  );
  $form['occuspace_server_busy'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Server for Busyness'),
    '#default_value' => variable_get('occuspace_server_busy', ""),
    '#description' => t("Server used for the Occuspace api for the busyness of the zone. Don't put in the number or the word now."),
    '#required' => TRUE,
  );
  $form['occuspace_authID'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Authorization ID'),
    '#default_value' => variable_get('occuspace_authID', ""),
    '#description' => t("The authorization ID for Occuspace"),
    '#required' => TRUE,
  );
  $form['occuspace_count_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Count Label'),
    '#default_value' => variable_get('occuspace_count_label', ""),
    '#description' => t("The label for the chart indicating the number of people occupying a zone"),
    '#required' => TRUE,
  );
  $form['occuspace_available_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Available Label'),
    '#default_value' => variable_get('occuspace_available_label', ""),
    '#description' => t("The label for the chart indicating the number of people that can still enter the zone"),
    '#required' => TRUE,
  );
  $form['occuspace_slice_text_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Slice Text Color'),
    '#default_value' => variable_get('occuspace_slice_text_color', 'white'),
    '#description' => t("The color for the text on the pie slices (hex or color name)."),
    '#required' => TRUE,
  );
  $form['occuspace_piehole'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Piehole'),
    '#size' => 5,
    '#default_value' => variable_get('occuspace_piehole', 'white'),
    '#description' => t("The blank space in the middle of the pie chart. Enter a number between 0 and 1. To shut your piehole, enter 0."),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}


function occuspace_chart_definition_alter(&$definition, $chart, $chart_id) {
    $chartChoice = $chart['#view']->query->options['occuspace_chart_choice'];
    $pieHole = $chart['#view']->query->options['occuspace_pieHole'];
    if ($chart['#chart_type'] == 'pie' || $chartChoice == 'yesGauge') {
        if (strpos($chart_id, 'occuspace') !== false) {
            $occuspace_count_label = variable_get('occuspace_count_label', "Occupied");
            $occuspace_available_label = variable_get('occuspace_available_label', "Available");
            $occuspace_slice_text_color = variable_get('occuspace_slice_text_color', "White");
            $data = array();
            $data[] = array('first', 'second');
            $count = 0;
            $capacity = 0;
            $percs = 0;
            $numOfRecords = 0;
            $chartChoice = ($chartChoice == 'yesGauge') ? 'Gauge' : 'PieChart';
            foreach ($chart['#view']->result as $d) {
                $numOfRecords ++;
                $percs += $d->percentage;
                $count += $d->count;
                $capacity += $d->capacity;
            }
            $percentage = $percs/$numOfRecords;
            if ($chartChoice == 'PieChart') {
                $available = ($capacity - $count);
                $data[] = array('', $capacity);
                $data[] = array($occuspace_count_label . ' ' . $count, $count);
                $data[] = array($occuspace_available_label . ' ' . $available, $available);

                $definition['options']['pieHole'] = $pieHole;
                $definition['options']['pieStartAngle'] = 90;
//                $definition['options']['legend']['position'] = 'labeled';
//                $definition['options']['legend']['textStyle']->color = 'black';
                $definition['options']['slices'][0] = [
                    'color' => 'transparent',
                    'enableInteractivity' => FALSE,
                ];
//                $definition['options']['innerSize'] = '50%';
                $definition['options']['pieSliceTextStyle']['color'] = $occuspace_slice_text_color;
                $definition['options']['pieSliceTextStyle']['text-anchor'] = 'middle';
                $definition['options']['pieSliceText'] = 'label';

//                $definition['options']['animation']['startup'] = TRUE;
//                $definition['options']['animation']['duration'] = 10000;
//                $definition['options']['animation']['easing'] = 'inAndOut';

                // See Definition before
//                dsm($definition);

                // here is where we override highcharts.
                if ($chart['#chart_library'] == 'highcharts') {
                    $newData[] = array(
                        'Occupied' => 350,
                    );
                    $newData[] = array(
                        'Available' => 1000,
                    );

                    $definition['plotOptions']['pie']['startAngle'] = -90;
                    $definition['plotOptions']['pie']['endAngle'] = 90;
                    $definition['plotOptions']['pie']['allowPointSelect'] = true;
                    $definition['plotOptions']['pie']['cursor'] = 'pointer';
                    $definition['plotOptions']['pie']['showInLegend'] = true;
                    $definition['plotOptions']['pie']['center'] = array(
                        '50%', '75%',
                    );

                    $definition['plotOptions']['pie']['dataLabels'] = array(
                        'enabled' => 'true',
                        'distance' => -50,
                        'style' => array(
                            'fontWeight' => 'bold',
                            'color' => 'black',
                            'size' => '20px'
                        ),
                        'format' => '{point.y:,.0f}'
                    );

                    $definition['tooltip']['pointFormat'] = '{point.percentage:.1f}%';
                    $definition['plotOptions']['pie']['size'] = '110%';
                    $definition['plotOptions']['series'][0]['dataLabels']['enabled'] = TRUE;

                    $definition['title'] = array(
                        'text' => '%<br>Occupied',
                        'align' => 'center',
                        'verticalAlign' => 'middle',
                        'y' => 50,
                        'x' => 0
                    );

                    $definition['series'][0]['innerSize'] = '50%';
                    $definition['series'][0]['type'] = 'pie';
                    $definition['series'][0]['data'] = $newData;
                }
            }
            else {
                $data[] = array(round($percentage) . '%', $count);
                $definition['options']['greenColor'] = '#00B239';
                $definition['options']['yellowColor'] = '#FFC300';
                $definition['options']['redColor'] = '#B20000';
                $definition['options']['greenFrom'] = 0;
                $definition['options']['greenTo'] = $capacity*.75;
                $definition['options']['yellowFrom'] = $capacity*.75;
                $definition['options']['yellowTo'] = $capacity*.9;
                $definition['options']['redFrom'] = $capacity*.9;
                $definition['options']['redTo'] = $capacity;
                $definition['options']['max'] = $capacity;

                // here is where we override highcharts.
                if ($chart['#chart_library'] == 'highcharts') {
                    drupal_add_js('https://code.highcharts.com/highcharts-more.js', 'external');

                    unset($definition['yAxis']);
                    unset($definition['series']);
                    unset($definition['pie']);
                    unset($definition['plotOptions']['pie']);
                    unset($definition['chart']);

                    $definition['chart'] = array(
                        'type' => 'gauge'
                    );

                    //'plotBackgroundColor' => null,
                    //                        'plotBackgroundImage' => null,
                    //                        'plotBorderWidth' => 0,
                    //                        'plotShadow' => false

                    $definition['pane'] = array(
                        'size' => '100%',
                        'startAngle' => -150,
                        'endAngle' => 150
                    );

                    /*
                     * 'background' => [
                            array(
                                'backgroundColor' =>
                                    array(
                                        'linearGradient' => array('x1'=>0, 'y1'=>0, 'x2'=>0, 'y2'=>1),
                                        'stops' => [
                                            ['0', '#FFF'],
                                            ['1', '#333']
                                        ]
                                    ),
                                'borderWidth' => 0,
                                'outerRadius' => '109%'
                            ),
                            array(
                                'backgroundColor' =>
                                    array(
                                        'linearGradient' => array('x1'=>0, 'y1'=>0, 'x2'=>0, 'y2'=>1),
                                        'stops' => [
                                            ['0', '#333'],
                                            ['1', '#FFF']
                                        ]
                                    ),
                                'borderWidth' => 1,
                                'outerRadius' => '107%'
                            ),
                            array(
                                'backgroundColor' => '#DDD',
                                'borderWidth' => 0,
                                'outerRadius' => '105%',
                                'innerRadius' => '103%'
                            )
                        ]
                     */

//                    $definition['plotOptions']['solidgauge'] = array(
//                        'innerRadius' => '75%',
//                        'radius' => '100%',
//                        'dataLabels' => array(
//                            'enabled' => true,
//                            'useHTML' => true,
//                            'zIndex' => 1000
//                        )
//                    );

                    //$definition['yAxis']['labels']['enabled'] = false;
                    $definition['yAxis'] = array(
                        'min' => 0,
                        'max' => 1000,
                        'gridLineColor' => 'transparent',
                        'lineColor' => 'transparent',
                        'minorTickInterval' => 'auto',
                        'minorTickWidth' => 1,
                        'minorTickLength' => 10,
                        'tickPixelInterval' => 30,
                        'tickColor' => '#666',
                        'tickPosition' => 'inside',
                        'tickLength' => 10,
                        'tickWidth' => 2,
                        'zIndex' => 100,
                        'plotBands' => [
                            array(
                                'from' => 0,
                                'to' => 333,
                                'color' => '#55BF3B'
                            ),
                            array(
                                'from' => 333,
                                'to' => 666,
                                'color' => '#DDDF0D'
                            ),
                            array(
                                'from' => 666,
                                'to' => 1000,
                                'color' => '#DF5353'
                            )
                        ]
                    );

                    $newData = array(350);
                    $definition['series'][0]['data'] = $newData;
                }
            }
            $definition['visualization'] = $chartChoice;
//            $definition['options']['legend']['position'] = 'top';
            $definition['data_labels'] = TRUE;
            $definition['data'] = $data;
            dsm($definition);
        }
    }
}
