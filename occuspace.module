<?php
/**
 * Implementation of hook_views_api().
 */
function occuspace_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'occuspace') . '/views',
  );
}
/**
 * Implements hook_menu().
 */
function occuspace_menu() {
  /* proxy settings */
  $items['admin/config/system/occuspace']
    = array(
    'title' => 'Occuspace report settings',
    'description' => 'Configure settings for Occuspace reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('occuspace_settings'),
    'access arguments' => array('administer occuspace settings'),
    'weight' => -10,
  );
  return $items;
}
function occuspace_permission() {
  $modperms = array(
    'administer occuspace settings' => array(
      'title' => t('Administer Occuspace reports'),
    ),
  );
  return $modperms;
}
/**
 * @return mixed
 */
function occuspace_settings() {
  $form = array();
  $form['occuspace_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Server'),
    '#default_value' => variable_get('occuspace_server', ""),
    '#description' => t("Server used for the Occuspace api"),
    '#required' => TRUE,
  );
  $form['occuspace_server_busy'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Server for Busyness'),
    '#default_value' => variable_get('occuspace_server_busy', ""),
    '#description' => t("Server used for the Occuspace api for the busyness of the zone. Don't put in the number or the word now."),
    '#required' => TRUE,
  );
  $form['occuspace_authID'] = array(
    '#type' => 'textfield',
    '#title' => t('Occuspace Authorization ID'),
    '#default_value' => variable_get('occuspace_authID', ""),
    '#description' => t("The authorization ID for Occuspace"),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

function occuspace_chart_definition_alter(&$definition, $chart, $chart_id) {
    $chartChoice = $chart['#view']->query->options['occuspace_chart_choice'];
    $pieHole = $chart['#view']->query->options['occuspace_pieHole'];
    $data_format_type = $chart['#view']->query->options['occuspace_data_format_type'];
    $occuspace_slice_text_color = $chart['#view']->query->options['occuspace_slice_text_color'];
    $occuspace_available_label = $chart['#view']->query->options['occuspace_available_label'];
    $occuspace_count_label = $chart['#view']->query->options['occuspace_count_label'];
    $greenColor = $chart['#view']->query->options['occuspace_green_color'];
    $yellowColor = $chart['#view']->query->options['occuspace_yellow_color'];
    $redColor = $chart['#view']->query->options['occuspace_red_color'];
    if ($chart['#chart_type'] == 'pie' || $chartChoice == 'yesGauge') {
        if (strpos($chart_id, 'occuspace') !== false) {
            $data = array();
            $data[] = array('first', 'second');
            $count = 0;
            $capacity = 0;
            $percs = 0;
            $numOfRecords = 0;
            $chartChoice = ($chartChoice == 'yesGauge') ? 'Gauge' : 'PieChart';
            foreach ($chart['#view']->result as $d) {
                $numOfRecords ++;
                $percs += $d->percentage;
                $count += $d->count;
                $capacity += $d->capacity;
            }
            $percentage = $percs/$numOfRecords;
            if ($chartChoice == 'PieChart') {
                $available = ($capacity - $count);
                $data[] = array('', $capacity);
                $data[] = array($occuspace_count_label . ' ' . $count, $count);
                $data[] = array($occuspace_available_label . ' ' . $available, $available);
                $definition['options']['pieHole'] = $pieHole;
                $definition['options']['pieStartAngle'] = 90;
                $definition['options']['slices'][0] = [
                    'color' => 'transparent',
                    'enableInteractivity' => FALSE,
                ];
                $definition['options']['pieSliceTextStyle']['color'] = $occuspace_slice_text_color;
                $definition['options']['pieSliceTextStyle']['text-anchor'] = 'middle';
                $definition['options']['pieSliceText'] = 'label';
                $definition['options']['tooltip']['ignoreBounds'] = true;
                // here is where we override highcharts.
                if ($chart['#chart_library'] == 'highcharts') {
                    $newData[] = array(
                        'Occupied' => 350,
                    );
                    $newData[] = array(
                        'Available' => 1000,
                    );
                    $definition['plotOptions']['pie']['startAngle'] = -90;
                    $definition['plotOptions']['pie']['endAngle'] = 90;
                    $definition['plotOptions']['pie']['allowPointSelect'] = true;
                    $definition['plotOptions']['pie']['cursor'] = 'pointer';
                    $definition['plotOptions']['pie']['showInLegend'] = true;
                    $definition['plotOptions']['pie']['center'] = array(
                        '50%', '75%',
                    );
                    $definition['plotOptions']['pie']['dataLabels'] = array(
                        'enabled' => 'true',
                        'distance' => -50,
                        'style' => array(
                            'fontWeight' => 'bold',
                            'color' => 'black',
                            'size' => '20px'
                        ),
                        'format' => '{point.y:,.0f}'
                    );
                    $definition['tooltip']['pointFormat'] = '{point.percentage:.1f}%';
                    $definition['plotOptions']['pie']['size'] = '110%';
                    $definition['plotOptions']['series'][0]['dataLabels']['enabled'] = TRUE;
                    $definition['title'] = array(
                        'text' => '%<br>Occupied',
                        'align' => 'center',
                        'verticalAlign' => 'middle',
                        'y' => 50,
                        'x' => 0
                    );
                    $definition['series'][0]['innerSize'] = '50%';
                    $definition['series'][0]['type'] = 'pie';
                    $definition['series'][0]['data'] = $newData;
                }
            }
            else {
                $data[] = array(round($percentage) . '%', $count);

                $greenTo = $yellowFrom = $capacity*.75;
                $yellowTo = $redFrom = $capacity*.9;
                $definition['options']['greenColor'] = $greenColor;
                $definition['options']['yellowColor'] = $yellowColor;
                $definition['options']['redColor'] = $redColor;
                $definition['options']['greenFrom'] = 0;
                $definition['options']['greenTo'] = $greenTo;
                $definition['options']['yellowFrom'] = $yellowFrom;
                $definition['options']['yellowTo'] = $yellowTo;
                $definition['options']['redFrom'] = $redFrom;
                $definition['options']['redTo'] = $capacity;
                $definition['options']['max'] = $capacity;
                // here is where we override highcharts.
                if ($chart['#chart_library'] == 'highcharts') {
                    drupal_add_js('https://code.highcharts.com/highcharts-more.js', 'external');
                    unset($definition['yAxis']);
                    unset($definition['series']);
                    unset($definition['pie']);
                    unset($definition['plotOptions']['pie']);
                    unset($definition['chart']);

                    $occupied_percentage = round((intval($count)/intval($capacity)) * 100);

                    $definition['chart'] = array(
                        'type' => 'gauge'
                    );

                    $definition['pane'] = array(
                        'size' => '100%',
                        'startAngle' => -150,
                        'endAngle' => 150
                    );

                    $yaxis_suffix = '';
                    if ($data_format_type === 'people') {
                        $greenTo = $yellowFrom = $capacity * .75;
                        $yellowTo = $redFrom = $capacity * .9;
                        $max = $redTo = $capacity;
                    } else {
                        $greenTo = $yellowFrom = 100 * .75;
                        $yellowTo = $redFrom = 100 * .9;
                        $max = $redTo = 100;
                        $yaxis_suffix = ' %';
                    }

                    $definition['yAxis'] = array(
                        'min' => 0,
                        'max' => $max,
                        'gridLineColor' => 'transparent',
                        'lineColor' => 'transparent',
                        'minorTickInterval' => 'auto',
                        'minorTickWidth' => 1,
                        'minorTickLength' => 3,
                        'minorTickColor' => '#000000',
                        'tickPixelInterval' => 100,
                        'tickColor' => '#000000',
                        'tickPosition' => 'inside',
                        'tickLength' => 10,
                        'tickWidth' => 5,
                        'zIndex' => 100,
                        'plotBands' => [
                            array(
                                'from' => 0,
                                'to' => $greenTo,
                                'color' => $greenColor
                            ),
                            array(
                                'from' => $yellowFrom,
                                'to' => $yellowTo,
                                'color' => $yellowColor
                            ),
                            array(
                                'from' => $redFrom,
                                'to' => $redTo,
                                'color' => $redColor
                            )
                        ],
                        'labels' => array(
                            'format' => '{value}'.$yaxis_suffix
                        )
                    );

                    $definition['plotOptions']['gauge']['dataLabels'] = array(
                        'enabled' => 'true',
                        'distance' => -50,
                        'style' => array(
                            'fontWeight' => 'bold',
                            'color' => 'black',
                            'size' => '20px'
                        ),
                        'format' => '{point.y:,.0f}'
                    );

                    $definition['tooltip']['pointFormat'] = round($percentage).'% Occupied';
                    $definition['series'][0]['data'] = $data_format_type === 'people' ? array($count) : array($occupied_percentage);
                    $definition['series'][0]['dataLabels'] = array(
                        'enabled' => true,
                        'style' => array(
                            'fontWeight' => 'bold',
                            'fontSize' => '20px'
                        ),
                        'format' => '{y} '.$occuspace_count_label
                    );
                    $definition['options']['lang']['thousandsSep'] = ',';
                }
            }
            $definition['visualization'] = $chartChoice;
//            $definition['options']['legend']['position'] = 'top';
            $definition['data_labels'] = TRUE;
            $definition['data'] = $data;
        }
    }
}
